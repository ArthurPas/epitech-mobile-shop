services:
  db:
    image: postgres:16
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: ${DOCKERFILE}
    container_name: nest
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - .:/app # Permet de monter le projet dans le container pour le hot-reloading
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    restart: always

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
    privileged: true

  # pour récupérer les perf des containers
  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - '8080:8080'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
    privileged: true

  # Pour visualiser les données de prometheus
  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - '3001:3000'
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - monitoring

  sonarqube:
    container_name: sonarqube
    image: sonarqube:latest
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/${PG_DB}
      - SONARQUBE_JDBC_USERNAME=${PG_USER}
      - SONARQUBE_JDBC_PASSWORD=${PG_PASSWORD}
    ports:
      - '9000:9000'
    depends_on:
      - db
    networks:
      - monitoring
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs

networks:
  monitoring:


volumes:
  grafana_data:
  postgres_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs: