stages:
  - lint
  - test
  - build
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  COMPOSE_PROJECT_NAME: gitlab_ci

lint:
  stage: lint
  image: node:23
  before_script:
    - curl -Ls https://cli.doppler.com/install.sh | sh
    - echo "DOPPLER_TOKEN=$DOPPLER_TOKEN"
    - doppler configure --token $DOPPLER_TOKEN --scope t-dev-702
    - doppler run --config dev -- npm ci
  script:
    - npm run lint
  only:
    - merge_requests
    - main
  tags:
    - docker

test:
  stage: test
  image: node:23
  services:
    - name: postgres:16
      alias: db  # Alias db pour la connexion à la base de données
  variables:
    POSTGRES_USER: $PG_USER
    POSTGRES_PASSWORD: $PG_PASSWORD  # Mot de passe PostgreSQL
    POSTGRES_DB: $PG_DB  # Base de données PostgreSQL
  before_script:
    - echo "Installation de Docker"
    - curl -fsSL https://get.docker.com -o get-docker.sh
    - sh get-docker.sh
    - docker --version
    - echo "Installation de Docker Compose"
    - curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - docker-compose --version
    - echo "Installation de Doppler"
    - curl -Ls https://cli.doppler.com/install.sh | sh  # Installer Doppler CLI
    - doppler configure --token $DOPPLER_TOKEN --scope t-dev-702  # Configurer Doppler
    # Installer docker-compose si nécessaire
    - if ! command -v docker-compose &>/dev/null; then curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose; fi
    # Vérification de Docker et Docker Compose
    - docker --version  # Vérifier la version de Docker
    - docker-compose --version  # Vérifier la version de Docker Compose
    - docker info  # Afficher les informations Docker pour diagnostiquer
    # Utiliser docker-compose pour démarrer PostgreSQL
    - doppler run --config dev -- docker-compose up -d db
    - sleep 10  # Attendre que PostgreSQL soit prêt
    - docker-compose ps  # Vérifier l'état des services
  script:
    - doppler run --config dev -- npm ci  # Installer les dépendances
    - doppler run --config dev -- npm run test  # Lancer les tests
  after_script:
    - docker-compose down -v  # Nettoyer les containers
  only:
    - merge_requests
    - main
  tags:
    - docker

build:
  stage: build
  image: node:23
  before_script:
    - doppler run -- npm ci
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
  only:
    - main
  tags:
    - docker

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - doppler run -- docker-compose build app
  script:
    - doppler run -- docker-compose up -d
  after_script:
    - docker-compose down
  only:
    - main
  tags:
    - docker